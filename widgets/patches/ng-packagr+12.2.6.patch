diff --git a/node_modules/ng-packagr/lib/flatten/rollup.js b/node_modules/ng-packagr/lib/flatten/rollup.js
index c9b5dc4..7b99689 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.js
+++ b/node_modules/ng-packagr/lib/flatten/rollup.js
@@ -4,18 +4,35 @@ exports.rollupBundleFile = void 0;
 const rollup = require("rollup");
 const plugin_node_resolve_1 = require("@rollup/plugin-node-resolve");
 const sourcemaps = require("rollup-plugin-sourcemaps");
+const terser = require("rollup-plugin-terser");
 const commonJs = require("@rollup/plugin-commonjs");
 const rollupJson = require("@rollup/plugin-json");
 const log = require("../utils/log");
 const umd_module_id_strategy_1 = require("./umd-module-id-strategy");
 const path = require("path");
+const fs = require('fs');
+
 /** Runs rollup over the given entry file, writes a bundle file. */
 async function rollupBundleFile(opts) {
     log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest} (${opts.format})`);
     // Create the bundle
+    const data = fs.readFileSync(path.join(__dirname, '../../../thingsboard/src/app/modules/common/modules-map.ts'), 'utf8');
+    const reg = /private modulesMap: {\[key: string\]: any} = {([^;]*)};/gsm;
+    const regMatch = reg.exec(data);
+    const modulesStr = regMatch[1];
+    const externalModuleIds = [];
+    modulesStr.split(',\n').forEach(
+      (line) => {
+        const moduleId = line.trim().split(":")[0].replaceAll("'", "").trim();
+        if (moduleId.length) {
+          externalModuleIds.push(moduleId);
+        }
+      }
+    );
+
     const bundle = await rollup.rollup({
         context: 'this',
-        external: moduleId => isExternalDependency(moduleId, opts.format),
+        external: moduleId => isExternalDependency(moduleId, opts.format, externalModuleIds),
         inlineDynamicImports: false,
         cache: opts.cache,
         input: opts.entry,
@@ -29,6 +46,8 @@ async function rollupBundleFile(opts) {
             // @ts-ignore
             sourcemaps(),
             { transform: opts.transform },
+            // @ts-ignore
+            terser.terser()
         ],
         onwarn: warning => {
             if (typeof warning === 'string') {
@@ -52,6 +71,7 @@ async function rollupBundleFile(opts) {
         format: opts.format,
         amd: opts.amd,
         file: opts.dest,
+        compact: true,
         banner: '',
         globals: moduleId => umd_module_id_strategy_1.umdModuleIdStrategy(moduleId, opts.umdModuleIds || {}),
         sourcemap: true,
@@ -59,9 +79,10 @@ async function rollupBundleFile(opts) {
     return bundle.cache;
 }
 exports.rollupBundleFile = rollupBundleFile;
-function isExternalDependency(moduleId, format) {
+function isExternalDependency(moduleId, format, externalModuleIds) {
     // more information about why we don't check for 'node_modules' path
     // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632
+
     if (moduleId.startsWith('.') || moduleId.startsWith('/') || path.isAbsolute(moduleId)) {
         // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib
         return false;
@@ -69,6 +90,9 @@ function isExternalDependency(moduleId, format) {
     if (format === 'umd' && moduleId.startsWith('tslib')) {
         return false;
     }
+    if (externalModuleIds.indexOf(moduleId) === -1) {
+        return false;
+    }
     return true;
 }
 //# sourceMappingURL=rollup.js.map
